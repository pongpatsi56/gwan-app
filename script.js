// ========== ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ==========
let players = JSON.parse(localStorage.getItem("players")) || [];
let history = JSON.parse(localStorage.getItem("history")) || [];
let currentMatch = JSON.parse(localStorage.getItem("currentMatch")) || null;
let currentChampion = JSON.parse(localStorage.getItem("currentChampion")) || null;
let championWinCount = parseInt(localStorage.getItem("championWinCount")) || 0;

// ========== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ==========
renderPlayerList();
renderGame();
renderSummary();
renderHistory();

// ========== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ==========
function addPlayer() {
  const name = document.getElementById("playerName").value.trim();
  const gender = document.getElementById("playerGender").value;

  if (!name) return;

  players.push({ name, gender, played: 0 });
  saveState();
  document.getElementById("playerName").value = "";
  renderPlayerList();
  renderSummary();
}

// ========== ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ==========
function renderPlayerList() {
  const list = document.getElementById("playerList");
  list.innerHTML = "";

  players.forEach((player, index) => {
    const li = document.createElement("li");
    li.innerHTML = `
      ${index + 1}. ${player.name} (${player.gender === "male" ? "‡∏ä" : "‡∏ç"})
      <button onclick="removePlayer(${index})" style="margin-left: 10px;" class="delete-btn">‚ùå</button>
    `;
    list.appendChild(li);
  });
}

// ========== ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà ==========
function renderGame() {
  if (players.length < 4) {
    document.getElementById("currentMatch").innerHTML =
      "‚ùó ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏Ñ‡∏ô";
    document.getElementById("winnerButtons").innerHTML = "";
    return;
  }

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 4 ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•
  const selectedPlayers = selectBalancedPlayers();

  // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏≤‡∏¢‡∏´‡∏ç‡∏¥‡∏á
  const males = selectedPlayers.filter((p) => p.gender === "male");
  const females = selectedPlayers.filter((p) => p.gender === "female");

  if (females.length >= 2) {
    currentMatch = [
      { team: [males[0], females[0]] },
      { team: [males[1], females[1]] },
    ];
  } else if (females.length === 1 && males.length >= 3) {
    currentMatch = [
      { team: [males[0], females[0]] },
      { team: [males[1], males[2]] },
    ];
  } else {
    currentMatch = [
      { team: [selectedPlayers[0], selectedPlayers[1]] },
      { team: [selectedPlayers[2], selectedPlayers[3]] },
    ];
  }

  showMatch();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 4 ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î‡∏™‡∏°‡∏î‡∏∏‡∏•
function selectBalancedPlayers() {
  if (players.length < 4) return [];

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å
  const sorted = [...players].sort((a, b) => a.played - b.played);

  let selected = [];
  let targetPlayedCount = sorted[0].played; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Å‡∏°‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
  selected = sorted.filter((p) => p.played === targetPlayedCount);

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 4 ‡∏Ñ‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  let index = selected.length;
  while (selected.length < 4 && index < sorted.length) {
    selected.push(sorted[index]);
    index++;
  }

  // ‡∏ï‡∏±‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 4 ‡∏Ñ‡∏ô‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 4
  if (selected.length > 4) {
    selected = selected.slice(0, 4);
  }

  return selected;
}

// ========== ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô ==========
function showMatch() {
  const div = document.getElementById("currentMatch");
  div.innerHTML = "";

  currentMatch.forEach((pair, index) => {
    const teamNames = pair.team.map((p) => p.name).join(" + ");
    div.innerHTML += `<div><strong>‡∏ó‡∏µ‡∏° ${
      index + 1
    }:</strong> ${teamNames}</div>`;
  });

  const winnerButtons = document.getElementById("winnerButtons");
  winnerButtons.innerHTML = "";
  currentMatch.forEach((pair, index) => {
    const btn = document.createElement("button");
    btn.textContent = `‡∏ó‡∏µ‡∏° ${index + 1} ‡∏ä‡∏ô‡∏∞`;
    btn.onclick = () => chooseWinner(index);
    winnerButtons.appendChild(btn);
  });
}

// ========== ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞ ==========
function chooseWinner(winnerIndex) {
  const winnerTeam = currentMatch[winnerIndex].team;
  const loserTeam = currentMatch[1 - winnerIndex].team;

  const winnerNames = winnerTeam.map((p) => p.name).join(" + ");
  const loserNames = loserTeam.map((p) => p.name).join(" + ");

  const confirmWin = confirm(
    `‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤ "${winnerNames}" ‡∏ä‡∏ô‡∏∞‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ "${loserNames}" ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`
  );
  if (!confirmWin) return;

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Å‡∏°
  [...winnerTeam, ...loserTeam].forEach((player) => {
    const found = players.find((p) => p.name === player.name);
    if (found) found.played++;
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
  history.push({
    winner: winnerTeam.map((p) => p.name),
    loser: loserTeam.map((p) => p.name),
  });

  const winnerKey = winnerTeam.map((p) => p.name).join("+");

  if (currentChampion === winnerKey) {
    championWinCount++;
  } else {
    currentChampion = winnerKey;
    championWinCount = 1;
  }

  if (championWinCount >= 2) {
    // ‡πÅ‡∏ä‡∏°‡∏õ‡πå‡∏Ñ‡∏£‡∏ö 2 ‡πÄ‡∏Å‡∏° ‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏µ‡∏°
    currentChampion = null;
    championWinCount = 0;
    renderRandomMatch();
  } else {
    // ‡πÅ‡∏ä‡∏°‡∏õ‡πå‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≠ ‚Üí ‡∏´‡∏≤‡∏ó‡∏µ‡∏°‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡πÄ‡∏à‡∏≠
    const remainingPlayers = players.filter(
      (p) => !winnerTeam.some((w) => w.name === p.name)
    );
    shuffleArray(remainingPlayers);
    const newOpponent = remainingPlayers.slice(0, 2);

    currentMatch = [{ team: winnerTeam }, { team: newOpponent }];
    showMatch();
  }

  saveState();
  renderSummary();
  renderHistory();
}

// ========== ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô ==========
function renderSummary() {
  const div = document.getElementById("gameSummary");
  div.innerHTML = "";

  const sorted = [...players].sort((a, b) => b.played - a.played);
  sorted.forEach((p) => {
    div.innerHTML += `<div>${p.name}: ${p.played} ‡πÄ‡∏Å‡∏°</div>`;
  });
}

// ========== ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô ==========
function renderHistory() {
  const ul = document.getElementById("matchHistory");
  ul.innerHTML = "";

  if (history.length === 0) {
    ul.innerHTML = "<li>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</li>";
    return;
  }

  history.forEach((match, index) => {
    const li = document.createElement("li");
    li.innerHTML = `
      <strong>‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà ${index + 1}</strong>: 
      üèÜ <span style="color:green">${match.winner.join(" + ")}</span> 
      ‡∏ä‡∏ô‡∏∞ 
      ‚ùå <span style="color:red">${match.loser.join(" + ")}</span>
    `;
    ul.appendChild(li);
  });
}

// ========== ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ==========
function resetAll() {
  if (!confirm("‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;
  players = [];
  history = [];
  currentMatch = null;
  currentChampion = null;
  championWinCount = 0;

  localStorage.removeItem("players");
  localStorage.removeItem("history");
  localStorage.removeItem("currentMatch");
  localStorage.removeItem("currentChampion");
  localStorage.removeItem("championWinCount");

  renderPlayerList();
  renderGame();
  renderSummary();
  renderHistory();
}

// ========== ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage ==========
function saveState() {
  localStorage.setItem("players", JSON.stringify(players));
  localStorage.setItem("history", JSON.stringify(history));
  localStorage.setItem("currentMatch", JSON.stringify(currentMatch));
  localStorage.setItem("currentChampion", JSON.stringify(currentChampion));
  localStorage.setItem("championWinCount", championWinCount.toString());
}

function removePlayer(index) {
  const player = players[index];
  const confirmDelete = confirm(
    `‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö "${player.name}"?`
  );
  if (!confirmDelete) return;

  players.splice(index, 1);
  saveState();
  renderPlayerList();
  renderSummary();
  renderGame();
}

function shufflePlayers() {
  if (players.length < 2) {
    alert("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á");
    return;
  }

  const confirmShuffle = confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?");
  if (!confirmShuffle) return;

  for (let i = players.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [players[i], players[j]] = [players[j], players[i]];
  }

  saveState();
  renderPlayerList();
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏∏‡πà‡∏° array ==========
function shuffleArray(arr) {
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
}

// ========== ‡∏à‡∏±‡∏î‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏• ==========
function renderRandomMatch() {
  const selected = selectBalancedPlayers();

  // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏≤‡∏¢‡∏´‡∏ç‡∏¥‡∏á
  const males = selected.filter((p) => p.gender === "male");
  const females = selected.filter((p) => p.gender === "female");

  if (females.length >= 2) {
    currentMatch = [
      { team: [males[0], females[0]] },
      { team: [males[1], females[1]] },
    ];
  } else if (females.length === 1 && males.length >= 3) {
    currentMatch = [
      { team: [males[0], females[0]] },
      { team: [males[1], males[2]] },
    ];
  } else {
    currentMatch = [
      { team: [selected[0], selected[1]] },
      { team: [selected[2], selected[3]] },
    ];
  }

  showMatch();
}