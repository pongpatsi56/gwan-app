// ========== ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ==========
let players = JSON.parse(localStorage.getItem("players")) || [];
let history = JSON.parse(localStorage.getItem("history")) || [];
let currentMatch = JSON.parse(localStorage.getItem("currentMatch")) || null;
let currentChampion =
  JSON.parse(localStorage.getItem("currentChampion")) || null;
let championWinCount = parseInt(localStorage.getItem("championWinCount")) || 0;

// ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏°‡∏µ waitCount
players.forEach((p) => {
  if (p.waitCount === undefined) p.waitCount = 0;
});

// ========== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ==========
renderPlayerList();
renderGame();
renderSummary();
renderHistory();

// ========== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ==========
function addPlayer() {
  const name = document.getElementById("playerName").value.trim();
  const gender = document.getElementById("playerGender").value;
  if (!name) return;

  players.push({ name, gender, played: 0, waitCount: 0 });
  saveState();
  document.getElementById("playerName").value = "";
  renderPlayerList();
  renderSummary();
  toggleStartButton();
}

// ========== ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ==========
function renderPlayerList() {
  const list = document.getElementById("playerList");
  list.innerHTML = "";

  players.forEach((player, index) => {
    const li = document.createElement("li");
    li.innerHTML = `
      ${index + 1}. ${player.name} (${player.gender === "male" ? "‡∏ä" : "‡∏ç"})
      <button onclick="removePlayer(${index})" style="margin-left: 10px;" class="delete-btn">‚ùå</button>
    `;
    list.appendChild(li);
  });
}

// ========== ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà ==========
function renderGame() {
  if (currentMatch) {
    showMatch();
    return;
  }

  if (players.length < 4) {
    document.getElementById("currentMatch").innerHTML =
      "‚ùó ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏Ñ‡∏ô";
    document.getElementById("winnerButtons").innerHTML = "";
    return;
  }

  const selectedPlayers = selectBalancedPlayers();
  if (selectedPlayers.length < 4) {
    document.getElementById("currentMatch").innerHTML =
      "‚ùó ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô‡∏û‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà)";
    document.getElementById("winnerButtons").innerHTML = "";
    return;
  }

  const males = selectedPlayers.filter((p) => p.gender === "male");
  const females = selectedPlayers.filter((p) => p.gender === "female");

  if (females.length >= 2) {
    currentMatch = [
      { team: [males[0], females[0]] },
      { team: [males[1], females[1]] },
    ];
  } else if (females.length === 1 && males.length >= 3) {
    currentMatch = [
      { team: [males[0], females[0]] },
      { team: [males[1], males[2]] },
    ];
  } else {
    currentMatch = [
      { team: [selectedPlayers[0], selectedPlayers[1]] },
      { team: [selectedPlayers[2], selectedPlayers[3]] },
    ];
  }

  saveState();
  showMatch();
}

// ========== ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏°‡∏î‡∏∏‡∏• ==========
// ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà waitCount = 0 ‡πÅ‡∏•‡∏∞ played ‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
function selectBalancedPlayers() {
  if (players.length < 4) return [];

  const availablePlayers = players.filter((p) => p.waitCount === 0);
  if (availablePlayers.length < 4) return [];

  const minPlayed = Math.min(...availablePlayers.map((p) => p.played));
  const leastPlayed = availablePlayers.filter((p) => p.played === minPlayed);

  if (leastPlayed.length >= 4) {
    shuffleArray(leastPlayed);
    return leastPlayed.slice(0, 4);
  }

  const remaining = availablePlayers
    .filter((p) => p.played !== minPlayed)
    .sort((a, b) => a.played - b.played);

  return leastPlayed.concat(remaining.slice(0, 4 - leastPlayed.length));
}

// ========== ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Ç‡πà‡∏á ==========
function showMatch() {
  const div = document.getElementById("currentMatch");
  div.innerHTML = "";

  currentMatch.forEach((pair, index) => {
    const teamNames = pair.team.map((p) => p.name).join(" + ");
    div.innerHTML += `<div><strong>‡∏ó‡∏µ‡∏° ${
      index + 1
    }:</strong> ${teamNames}</div>`;
  });

  const winnerButtons = document.getElementById("winnerButtons");
  winnerButtons.innerHTML = "";
  currentMatch.forEach((pair, index) => {
    const btn = document.createElement("button");
    btn.textContent = `‡∏ó‡∏µ‡∏° ${index + 1} ‡∏ä‡∏ô‡∏∞`;
    btn.onclick = () => chooseWinner(index);
    winnerButtons.appendChild(btn);
  });
}

// ========== ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞ ==========
function chooseWinner(winnerIndex) {
  const winnerTeam = currentMatch[winnerIndex].team;
  const loserTeam = currentMatch[1 - winnerIndex].team;

  const winnerNames = winnerTeam.map((p) => p.name).join(" + ");
  const loserNames = loserTeam.map((p) => p.name).join(" + ");

  const confirmWin = confirm(
    `‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤ "${winnerNames}" ‡∏ä‡∏ô‡∏∞‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ "${loserNames}" ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`
  );
  if (!confirmWin) return;

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Å‡∏°
  [...winnerTeam, ...loserTeam].forEach((player) => {
    const found = players.find((p) => p.name === player.name);
    if (found) found.played++;
  });

  // ‡∏ú‡∏π‡πâ‡πÅ‡∏û‡πâ‡∏û‡∏±‡∏Å 1 ‡πÄ‡∏Å‡∏°
  loserTeam.forEach((player) => {
    const found = players.find((p) => p.name === player.name);
    if (found) found.waitCount = 1;
  });

  // ‡∏•‡∏î waitCount ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô
  players.forEach((p) => {
    if (p.waitCount > 0) p.waitCount--;
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
  history.push({
    winner: winnerTeam.map((p) => p.name),
    loser: loserTeam.map((p) => p.name),
  });

  const winnerKey = winnerTeam.map((p) => p.name).join("+");
  if (currentChampion === winnerKey) {
    championWinCount++;
  } else {
    currentChampion = winnerKey;
    championWinCount = 1;
  }

  if (championWinCount >= 2) {
    currentChampion = null;
    championWinCount = 0;
    renderRandomMatch();
  } else {
    const remainingPlayers = players.filter(
      (p) => !winnerTeam.some((w) => w.name === p.name) && p.waitCount === 0
    );

    const minPlayed = Math.min(...remainingPlayers.map((p) => p.played));
    const leastPlayed = remainingPlayers.filter((p) => p.played === minPlayed);
    let nextOpponents =
      leastPlayed.length >= 2 ? leastPlayed : remainingPlayers;

    shuffleArray(nextOpponents);
    const newOpponent = nextOpponents.slice(0, 2);

    currentMatch = [{ team: winnerTeam }, { team: newOpponent }];
    showMatch();
  }

  saveState();
  renderSummary();
  renderHistory();
}

// ========== ‡∏™‡∏£‡∏∏‡∏õ ==========
function renderSummary() {
  const div = document.getElementById("gameSummary");
  div.innerHTML = "";

  const sorted = [...players].sort((a, b) => b.played - a.played);
  sorted.forEach((p) => {
    div.innerHTML += `<div>${p.name}: ${p.played} ‡πÄ‡∏Å‡∏°</div>`;
  });

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ min played
  if (players.length > 0) {
    const minPlayed = Math.min(...players.map((p) => p.played));
    div.innerHTML += `<hr><div><strong>üßÆ ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î:</strong> ${minPlayed} ‡πÄ‡∏Å‡∏°</div>`;
  }
}

// ========== ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ==========
function renderHistory() {
  const ul = document.getElementById("matchHistory");
  ul.innerHTML = "";

  if (history.length === 0) {
    ul.innerHTML = "<li>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</li>";
    return;
  }

  history.forEach((match, index) => {
    const li = document.createElement("li");
    li.innerHTML = `
      <strong>‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà ${index + 1}</strong>: 
      üèÜ <span style="color:green">${match.winner.join(" + ")}</span> 
      ‡∏ä‡∏ô‡∏∞ 
      ‚ùå <span style="color:red">${match.loser.join(" + ")}</span>
    `;
    ul.appendChild(li);
  });
}

// ========== ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ==========
function resetAll() {
  if (!confirm("‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;
  players = [];
  history = [];
  currentMatch = null;
  currentChampion = null;
  championWinCount = 0;

  localStorage.clear();

  renderPlayerList();
  renderGame();
  renderSummary();
  renderHistory();
}

// ========== ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ==========
function saveState() {
  localStorage.setItem("players", JSON.stringify(players));
  localStorage.setItem("history", JSON.stringify(history));
  localStorage.setItem("currentMatch", JSON.stringify(currentMatch));
  localStorage.setItem("currentChampion", JSON.stringify(currentChampion));
  localStorage.setItem("championWinCount", championWinCount.toString());
}

// ========== ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ==========
function removePlayer(index) {
  const player = players[index];
  const confirmDelete = confirm(
    `‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö "${player.name}"?`
  );
  if (!confirmDelete) return;

  players.splice(index, 1);
  saveState();
  renderPlayerList();
  renderSummary();
  renderGame();
}

// ========== ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ==========
function shufflePlayers() {
  if (players.length < 2) {
    alert("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á");
    return;
  }

  const confirmShuffle = confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?");
  if (!confirmShuffle) return;

  shuffleArray(players);
  saveState();
  renderPlayerList();
}

// ========== ‡∏™‡∏∏‡πà‡∏° Array ==========
function shuffleArray(arr) {
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
}

// ========== ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° ==========
function renderRandomMatch() {
  const selected = selectBalancedPlayers();
  const males = selected.filter((p) => p.gender === "male");
  const females = selected.filter((p) => p.gender === "female");

  if (females.length >= 2) {
    currentMatch = [
      { team: [males[0], females[0]] },
      { team: [males[1], females[1]] },
    ];
  } else if (females.length === 1 && males.length >= 3) {
    currentMatch = [
      { team: [males[0], females[0]] },
      { team: [males[1], males[2]] },
    ];
  } else {
    currentMatch = [
      { team: [selected[0], selected[1]] },
      { team: [selected[2], selected[3]] },
    ];
  }

  showMatch();
}

// ========== ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏° ==========
function toggleStartButton() {
  const btn = document.getElementById("btnStartGame");
  if (!btn) return;
  btn.style.display = players.length >= 4 ? "inline-block" : "none";
}
